// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/repository/firebase.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	auth "firebase.google.com/go/auth"
	gomock "github.com/golang/mock/gomock"
	model "github.com/AkihikoOkubo/gae-go-sample/src/domain/model"
	context "golang.org/x/net/context"
)

// MockFirebase is a mock of Firebase interface.
type MockFirebase struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseMockRecorder
}

// MockFirebaseMockRecorder is the mock recorder for MockFirebase.
type MockFirebaseMockRecorder struct {
	mock *MockFirebase
}

// NewMockFirebase creates a new mock instance.
func NewMockFirebase(ctrl *gomock.Controller) *MockFirebase {
	mock := &MockFirebase{ctrl: ctrl}
	mock.recorder = &MockFirebaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebase) EXPECT() *MockFirebaseMockRecorder {
	return m.recorder
}

// FinishFirestoreClient mocks base method.
func (m *MockFirebase) FinishFirestoreClient(cli *firestore.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishFirestoreClient", cli)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishFirestoreClient indicates an expected call of FinishFirestoreClient.
func (mr *MockFirebaseMockRecorder) FinishFirestoreClient(cli interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishFirestoreClient", reflect.TypeOf((*MockFirebase)(nil).FinishFirestoreClient), cli)
}

// NewAuthClint mocks base method.
func (m *MockFirebase) NewAuthClint(ctx context.Context) (*auth.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAuthClint", ctx)
	ret0, _ := ret[0].(*auth.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAuthClint indicates an expected call of NewAuthClint.
func (mr *MockFirebaseMockRecorder) NewAuthClint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAuthClint", reflect.TypeOf((*MockFirebase)(nil).NewAuthClint), ctx)
}

// NewFirestoreClint mocks base method.
func (m *MockFirebase) NewFirestoreClint(ctx context.Context) (*firestore.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFirestoreClint", ctx)
	ret0, _ := ret[0].(*firestore.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFirestoreClint indicates an expected call of NewFirestoreClint.
func (mr *MockFirebaseMockRecorder) NewFirestoreClint(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFirestoreClint", reflect.TypeOf((*MockFirebase)(nil).NewFirestoreClint), ctx)
}

// SaveUser mocks base method.
func (m *MockFirebase) SaveUser(ctx context.Context, cli *firestore.Client, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, cli, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockFirebaseMockRecorder) SaveUser(ctx, cli, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockFirebase)(nil).SaveUser), ctx, cli, user)
}

// User mocks base method.
func (m *MockFirebase) User(ctx context.Context, cli *firestore.Client, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, cli, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockFirebaseMockRecorder) User(ctx, cli, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockFirebase)(nil).User), ctx, cli, id)
}

// VerifyIDToken mocks base method.
func (m *MockFirebase) VerifyIDToken(ctx context.Context, cli *auth.Client, t *model.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, cli, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseMockRecorder) VerifyIDToken(ctx, cli, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebase)(nil).VerifyIDToken), ctx, cli, t)
}
